// Generated by CoffeeScript 1.10.0
(function() {
  var EVENT_TYPES, Logger, makeEventLogger, uuid;

  uuid = require('node-uuid');

  EVENT_TYPES = {
    hold: 'hold',
    release: 'release',
    booking: 'booking',
    conceptRequest: 'concept_request',
    httpRequest: 'http_request',
    startup: 'startup',
    exception: 'exception'
  };

  Logger = (function() {
    function Logger(dependencies, scoped_properties1) {
      var EventLogger, event_type, name;
      this.dependencies = dependencies;
      this.scoped_properties = scoped_properties1;
      EventLogger = makeEventLogger(this.dependencies, this.scoped_properties);
      for (name in EVENT_TYPES) {
        event_type = EVENT_TYPES[name];
        this[name] = new EventLogger(event_type);
      }
    }

    Logger.prototype["with"] = function(scoped_properties) {
      return new Logger(this.dependencies, Object.assign({}, this.scoped_properties, scoped_properties));
    };

    return Logger;

  })();

  makeEventLogger = function(arg, scoped_properties) {
    var now, output;
    now = arg.now, output = arg.output;
    return (function() {
      var output_log;

      function _Class(type) {
        this.type = type;
        this.debug = output_log('DEBUG');
        this.info = output_log('INFO');
        this.warning = output_log('WARNING');
        this.error = output_log('ERROR');
        this.critical = output_log('CRITICAL');
      }

      output_log = function(severity) {
        return function(extra_properties) {
          var all_properties, default_properties;
          default_properties = {
            service: 'default_service_name',
            timestamp: now(),
            event_type: this.type,
            severity: severity
          };
          if (typeof extra_properties !== 'object') {
            extra_properties = {
              message: extra_properties
            };
          }
          all_properties = Object.assign({}, default_properties, scoped_properties, extra_properties);
          return output.log(JSON.stringify(all_properties));
        };
      };

      return _Class;

    })();
  };

  module.exports = Logger;

}).call(this);
